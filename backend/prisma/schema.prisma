generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// Modelo para os usuários do sistema.
model User {
  id        String @id @default(uuid())
  email     String @unique
  name      String
  password  String // lembrar de armazenar o hash da senha

  latitude  Float?
  longitude Float?

  isAdmin   Boolean @default(false)
  points    Int     @default(0)

  // Relações
  shoppingList      ItemListaDeCompra[] // A lista de compras ATUAL do usuário.
  reviews           ReviewMarket[]      // Avaliações de mercados feitas por este usuário.
  completedPurchases CompraFinalizada[] // O histórico de compras finalizadas do usuário.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Modelo para os produtos disponíveis no sistema.
model Product {
  id           String  @id @default(uuid())
  name         String  @unique
  description  String?
  currentPrice Float
  imageUrl     String?
  isValid      Boolean @default(false)

  
  priceHistory      PriceHistory[]
  inShoppingLists   ItemListaDeCompra[]
  markets           Market[]
  inPurchasedItems  ItemComprado[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Modelo para os mercados
model Market {
  id        String @id @default(uuid())
  name      String
  latitude  Float
  longitude Float

  // Relações
  availableProducts Product[]      
  reviews           ReviewMarket[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- Tabelas de Relação e Histórico ---

/// Representa um item específico na lista de compras de um usuário (carrinho).
model ItemListaDeCompra {
  id         String  @id @default(uuid())
  quantity   Int     @default(1)
  isSelected Boolean @default(false)

  // Relações
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

/// Armazena o histórico de preços de um produto.
model PriceHistory {
  id    String  @id @default(uuid())
  price Float

  // Relações
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
}

/// Modela uma avaliação feita por um usuário a um mercado.
model ReviewMarket {
  id      String @id @default(uuid())
  rating  Int 
  comment String?

  // Relações
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  market    Market @relation(fields: [marketId], references: [id], onDelete: Cascade)
  marketId  String

  createdAt DateTime @default(now())

  @@unique([userId, marketId])
}


/// Representa uma única compra finalizada por um usuário.
/// Cada vez que o usuário "fecha" um carrinho, um registro deste é criado.
model CompraFinalizada {
  id        String @id @default(uuid())
  totalCost Float

  // Relações
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  // A lista de itens que fizeram parte desta compra.
  purchasedItems ItemComprado[]

  createdAt DateTime @default(now()) // Data em que a compra foi finalizada.
}

/// Representa um item específico que fez parte de uma compra finalizada.
/// É um "snapshot" do produto no momento da compra, para garantir a integridade do histórico.
model ItemComprado {
  id        String @id @default(uuid())
  
  productName  String  // Guarda o nome como estava na hora da compra.
  priceAtTime  Float
  quantity     Int

  // Relações
  purchase   CompraFinalizada @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  purchaseId String
  
  // Relação com o produto original, para poder clicar e ver o produto hoje.
  // onDelete: SetNull significa que se o produto for deletado do sistema, o histórico não será perdido.
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
}